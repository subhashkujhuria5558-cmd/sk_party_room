# Create complete Railway-ready SK Party Room project structure
import os
import json

# Create main project directory structure
project_structure = {
    "package.json": {
        "name": "sk-party-room",
        "version": "1.0.0",
        "description": "Professional Party Room Application",
        "main": "server.js",
        "scripts": {
            "start": "node server.js",
            "dev": "nodemon server.js",
            "build": "npm run build:client",
            "build:client": "cd client && npm run build"
        },
        "dependencies": {
            "express": "^4.18.2",
            "socket.io": "^4.7.2",
            "mongoose": "^7.5.0",
            "cors": "^2.8.5",
            "dotenv": "^16.3.1",
            "jsonwebtoken": "^9.0.2",
            "bcryptjs": "^2.4.3",
            "multer": "^1.4.5",
            "google-auth-library": "^9.0.0",
            "razorpay": "^2.9.2",
            "node-cron": "^3.0.2",
            "uuid": "^9.0.0"
        },
        "devDependencies": {
            "nodemon": "^3.0.1"
        },
        "engines": {
            "node": ">=18.0.0"
        }
    },
    
    ".env.example": """# Database
MONGODB_URI=mongodb+srv://username:password@cluster.mongodb.net/skpartyroom
JWT_SECRET=your_jwt_secret_here

# Google OAuth
GOOGLE_CLIENT_ID=your_google_client_id
GOOGLE_CLIENT_SECRET=your_google_client_secret

# Payment
RAZORPAY_KEY_ID=your_razorpay_key
RAZORPAY_KEY_SECRET=your_razorpay_secret

# App Config
PORT=3001
NODE_ENV=production
FRONTEND_URL=http://localhost:3000
""",

    "server.js": """const express = require('express');
const http = require('http');
const socketIo = require('socket.io');
const mongoose = require('mongoose');
const cors = require('cors');
const path = require('path');
require('dotenv').config();

const app = express();
const server = http.createServer(app);
const io = socketIo(server, {
    cors: {
        origin: "*",
        methods: ["GET", "POST"]
    }
});

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.static(path.join(__dirname, 'public')));

// MongoDB Connection
mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/skpartyroom')
    .then(() => console.log('Connected to MongoDB'))
    .catch(err => console.error('MongoDB connection error:', err));

// Routes
app.use('/api/auth', require('./routes/auth'));
app.use('/api/users', require('./routes/users'));
app.use('/api/rooms', require('./routes/rooms'));
app.use('/api/games', require('./routes/games'));
app.use('/api/wallet', require('./routes/wallet'));
app.use('/api/gifts', require('./routes/gifts'));

// Socket.io for real-time features
const activeUsers = new Map();
const gameRooms = new Map();

io.on('connection', (socket) => {
    console.log('User connected:', socket.id);

    socket.on('join-room', (roomId, userId) => {
        socket.join(roomId);
        activeUsers.set(socket.id, { userId, roomId });
        io.to(roomId).emit('user-joined', { userId, socketId: socket.id });
    });

    socket.on('leave-room', (roomId) => {
        socket.leave(roomId);
        io.to(roomId).emit('user-left', socket.id);
    });

    socket.on('send-message', (data) => {
        io.to(data.roomId).emit('receive-message', {
            message: data.message,
            userId: data.userId,
            timestamp: new Date()
        });
    });

    socket.on('send-gift', (data) => {
        io.to(data.roomId).emit('receive-gift', data);
    });

    socket.on('game-move', (data) => {
        io.to(data.gameId).emit('game-update', data);
    });

    socket.on('disconnect', () => {
        const user = activeUsers.get(socket.id);
        if (user) {
            io.to(user.roomId).emit('user-left', socket.id);
            activeUsers.delete(socket.id);
        }
        console.log('User disconnected:', socket.id);
    });
});

// Serve React app in production
if (process.env.NODE_ENV === 'production') {
    app.use(express.static(path.join(__dirname, 'build')));
    
    app.get('*', (req, res) => {
        res.sendFile(path.join(__dirname, 'build', 'index.html'));
    });
}

const PORT = process.env.PORT || 3001;
server.listen(PORT, () => {
    console.log(`SK Party Room Server running on port ${PORT}`);
});
""",

    "models/User.js": """const mongoose = require('mongoose');

const userSchema = new mongoose.Schema({
    googleId: { type: String, required: true, unique: true },
    email: { type: String, required: true, unique: true },
    name: { type: String, required: true },
    avatar: { type: String, default: '' },
    coins: { type: Number, default: 500 },
    diamonds: { type: Number, default: 0 },
    level: { type: Number, default: 1 },
    experience: { type: Number, default: 0 },
    vipLevel: { type: Number, default: 0 },
    friends: [{ type: mongoose.Schema.Types.ObjectId, ref: 'User' }],
    followers: [{ type: mongoose.Schema.Types.ObjectId, ref: 'User' }],
    following: [{ type: mongoose.Schema.Types.ObjectId, ref: 'User' }],
    badges: [{ 
        name: String,
        icon: String,
        earned: { type: Date, default: Date.now }
    }],
    gameStats: {
        gamesPlayed: { type: Number, default: 0 },
        gamesWon: { type: Number, default: 0 },
        totalWinnings: { type: Number, default: 0 }
    },
    dailyRewards: {
        lastClaim: { type: Date },
        streak: { type: Number, default: 0 }
    },
    isOnline: { type: Boolean, default: false },
    lastSeen: { type: Date, default: Date.now },
    createdAt: { type: Date, default: Date.now },
    updatedAt: { type: Date, default: Date.now }
});

module.exports = mongoose.model('User', userSchema);
""",

    "models/Room.js": """const mongoose = require('mongoose');

const roomSchema = new mongoose.Schema({
    name: { type: String, required: true },
    description: { type: String, default: '' },
    owner: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    maxSeats: { type: Number, default: 15 },
    currentUsers: [{ 
        user: { type: mongoose.Schema.Types.ObjectId, ref: 'User' },
        seat: { type: Number },
        isMuted: { type: Boolean, default: false },
        joinedAt: { type: Date, default: Date.now }
    }],
    lockedSeats: [{ type: Number }],
    isLocked: { type: Boolean, default: false },
    isActive: { type: Boolean, default: true },
    roomType: { type: String, enum: ['party', 'pk', 'game'], default: 'party' },
    banner: { type: String, default: '' },
    category: { type: String, default: 'general' },
    createdAt: { type: Date, default: Date.now }
});

module.exports = mongoose.model('Room', roomSchema);
""",

    "models/Game.js": """const mongoose = require('mongoose');

const gameSchema = new mongoose.Schema({
    name: { type: String, required: true },
    type: { type: String, required: true },
    icon: { type: String, required: true },
    entryFee: { type: Number, required: true },
    minWin: { type: Number, required: true },
    maxWin: { type: Number, required: true },
    winRate: { type: Number, default: 0.4 },
    isActive: { type: Boolean, default: true },
    isHot: { type: Boolean, default: false },
    isNew: { type: Boolean, default: false },
    description: { type: String, default: '' },
    rules: { type: String, default: '' },
    playersOnline: { type: Number, default: 0 }
});

const gameSessionSchema = new mongoose.Schema({
    gameId: { type: mongoose.Schema.Types.ObjectId, ref: 'Game', required: true },
    playerId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    entryFee: { type: Number, required: true },
    winAmount: { type: Number, default: 0 },
    isWin: { type: Boolean, default: false },
    gameData: { type: Object, default: {} },
    createdAt: { type: Date, default: Date.now }
});

module.exports = {
    Game: mongoose.model('Game', gameSchema),
    GameSession: mongoose.model('GameSession', gameSessionSchema)
};
""",

    "routes/auth.js": """const express = require('express');
const { OAuth2Client } = require('google-auth-library');
const jwt = require('jsonwebtoken');
const User = require('../models/User');

const router = express.Router();
const client = new OAuth2Client(process.env.GOOGLE_CLIENT_ID);

// Google OAuth Login
router.post('/google', async (req, res) => {
    try {
        const { token } = req.body;
        const ticket = await client.verifyIdToken({
            idToken: token,
            audience: process.env.GOOGLE_CLIENT_ID
        });

        const payload = ticket.getPayload();
        const { sub: googleId, email, name, picture } = payload;

        let user = await User.findOne({ googleId });
        
        if (!user) {
            user = new User({
                googleId,
                email,
                name,
                avatar: picture,
                coins: 1000 // Welcome bonus
            });
            await user.save();
        } else {
            user.isOnline = true;
            user.lastSeen = new Date();
            await user.save();
        }

        const jwtToken = jwt.sign(
            { userId: user._id, email: user.email },
            process.env.JWT_SECRET,
            { expiresIn: '30d' }
        );

        res.json({
            success: true,
            token: jwtToken,
            user: {
                id: user._id,
                name: user.name,
                email: user.email,
                avatar: user.avatar,
                coins: user.coins,
                diamonds: user.diamonds,
                level: user.level,
                vipLevel: user.vipLevel
            }
        });
    } catch (error) {
        console.error('Auth error:', error);
        res.status(400).json({ success: false, message: 'Authentication failed' });
    }
});

module.exports = router;
""",

    "routes/wallet.js": """const express = require('express');
const User = require('../models/User');
const auth = require('../middleware/auth');

const router = express.Router();

// Get wallet balance
router.get('/balance', auth, async (req, res) => {
    try {
        const user = await User.findById(req.userId);
        res.json({
            success: true,
            coins: user.coins,
            diamonds: user.diamonds
        });
    } catch (error) {
        res.status(500).json({ success: false, message: 'Server error' });
    }
});

// Coin packages
router.get('/packages', (req, res) => {
    const packages = [
        { id: 1, price: 80, coins: 7400, vip: 7400, display: "₹80 = 7,400 Coins" },
        { id: 2, price: 400, coins: 37250, vip: 37250, display: "₹400 = 37,250 Coins" },
        { id: 3, price: 800, coins: 75000, vip: 75000, display: "₹800 = 75,000 Coins" },
        { id: 4, price: 2400, coins: 226500, vip: 226500, display: "₹2,400 = 226,500 Coins" },
        { id: 5, price: 4800, coins: 456000, vip: 456000, display: "₹4,800 = 456,000 Coins" },
        { id: 6, price: 8000, coins: 765000, vip: 765000, display: "₹8,000 = 765,000 Coins" },
        { id: 7, price: 16000, coins: 1540000, vip: 1540000, display: "₹16,000 = 1,540,000 Coins" },
        { id: 8, price: 32000, coins: 3100000, vip: 3100000, display: "₹32,000 = 3,100,000 Coins" },
        { id: 9, price: 48000, coins: 4680000, vip: 4680000, display: "₹48,000 = 4,680,000 Coins" }
    ];
    
    res.json({ success: true, packages });
});

// Create payment order
router.post('/recharge', auth, async (req, res) => {
    try {
        const { packageId, amount, coins } = req.body;
        
        // Generate UPI payment links
        const upiId = "subhashkujhuria5558@paytm";
        const merchantName = "SK Party Room";
        
        const paymentData = {
            orderId: `SKPR${Date.now()}`,
            amount: amount,
            coins: coins,
            upiLinks: {
                phonepe: `phonepe://pay?pa=${upiId}&pn=${merchantName}&am=${amount}&cu=INR`,
                googlepay: `tez://upi/pay?pa=${upiId}&pn=${merchantName}&am=${amount}&cu=INR`,
                paytm: `paytmmp://pay?pa=${upiId}&pn=${merchantName}&am=${amount}&cu=INR`,
                generic: `upi://pay?pa=${upiId}&pn=${merchantName}&am=${amount}&cu=INR`
            }
        };
        
        res.json({ success: true, paymentData });
    } catch (error) {
        res.status(500).json({ success: false, message: 'Payment creation failed' });
    }
});

// Verify payment (manual)
router.post('/verify-payment', auth, async (req, res) => {
    try {
        const { orderId, transactionId, coins } = req.body;
        
        // In production, verify with payment gateway
        // For now, simulate successful payment
        const user = await User.findById(req.userId);
        user.coins += coins;
        await user.save();
        
        res.json({
            success: true,
            message: 'Payment verified successfully',
            newBalance: user.coins
        });
    } catch (error) {
        res.status(500).json({ success: false, message: 'Payment verification failed' });
    }
});

module.exports = router;
""",

    "routes/games.js": """const express = require('express');
const { Game, GameSession } = require('../models/Game');
const User = require('../models/User');
const auth = require('../middleware/auth');

const router = express.Router();

// Get all games
router.get('/', async (req, res) => {
    try {
        const games = await Game.find({ isActive: true });
        res.json({ success: true, games });
    } catch (error) {
        res.status(500).json({ success: false, message: 'Server error' });
    }
});

// Join game
router.post('/join', auth, async (req, res) => {
    try {
        const { gameId } = req.body;
        const game = await Game.findById(gameId);
        const user = await User.findById(req.userId);
        
        if (!game) {
            return res.status(404).json({ success: false, message: 'Game not found' });
        }
        
        if (user.coins < game.entryFee) {
            return res.status(400).json({ 
                success: false, 
                message: 'Insufficient coins' 
            });
        }
        
        // Deduct entry fee
        user.coins -= game.entryFee;
        user.gameStats.gamesPlayed += 1;
        await user.save();
        
        // Create game session
        const gameSession = new GameSession({
            gameId: game._id,
            playerId: user._id,
            entryFee: game.entryFee
        });
        await gameSession.save();
        
        res.json({
            success: true,
            sessionId: gameSession._id,
            remainingCoins: user.coins
        });
    } catch (error) {
        res.status(500).json({ success: false, message: 'Game join failed' });
    }
});

// Play game (simplified)
router.post('/play', auth, async (req, res) => {
    try {
        const { sessionId, gameData } = req.body;
        const session = await GameSession.findById(sessionId);
        const game = await Game.findById(session.gameId);
        const user = await User.findById(req.userId);
        
        // Simple win/loss logic (random based on win rate)
        const isWin = Math.random() < game.winRate;
        let winAmount = 0;
        
        if (isWin) {
            winAmount = Math.floor(Math.random() * (game.maxWin - game.minWin) + game.minWin);
            user.coins += winAmount;
            user.gameStats.gamesWon += 1;
            user.gameStats.totalWinnings += winAmount;
        }
        
        session.isWin = isWin;
        session.winAmount = winAmount;
        session.gameData = gameData;
        
        await session.save();
        await user.save();
        
        res.json({
            success: true,
            isWin,
            winAmount,
            newBalance: user.coins
        });
    } catch (error) {
        res.status(500).json({ success: false, message: 'Game play failed' });
    }
});

module.exports = router;
""",

    "middleware/auth.js": """const jwt = require('jsonwebtoken');

const auth = (req, res, next) => {
    try {
        const token = req.header('Authorization')?.replace('Bearer ', '');
        
        if (!token) {
            return res.status(401).json({ success: false, message: 'No token provided' });
        }
        
        const decoded = jwt.verify(token, process.env.JWT_SECRET);
        req.userId = decoded.userId;
        next();
    } catch (error) {
        res.status(401).json({ success: false, message: 'Invalid token' });
    }
};

module.exports = auth;
""",

    "public/index.html": """<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SK Party Room - Professional Voice Chat & Gaming</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://accounts.google.com/gsi/client" async defer></script>
    <script src="https://cdn.socket.io/4.7.2/socket.io.min.js"></script>
    <style>
        .gradient-bg { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); }
        .game-card { transition: all 0.3s ease; }
        .game-card:hover { transform: translateY(-5px); }
    </style>
</head>
<body class="bg-gray-900 text-white min-h-screen">
    <div id="app">
        <!-- Loading Screen -->
        <div id="loading-screen" class="fixed inset-0 gradient-bg flex items-center justify-center z-50">
            <div class="text-center">
                <div class="text-6xl mb-4">🎉</div>
                <h1 class="text-4xl font-bold mb-2">SK Party Room</h1>
                <p class="text-lg opacity-80">Loading amazing features...</p>
                <div class="mt-4">
                    <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-white mx-auto"></div>
                </div>
            </div>
        </div>

        <!-- Login Screen -->
        <div id="login-screen" class="hidden fixed inset-0 gradient-bg flex items-center justify-center z-40">
            <div class="bg-white/10 backdrop-blur-lg rounded-2xl p-8 max-w-md w-full mx-4">
                <div class="text-center mb-8">
                    <div class="text-5xl mb-4">🎉</div>
                    <h1 class="text-3xl font-bold mb-2">SK Party Room</h1>
                    <p class="text-gray-200">Join the ultimate party experience!</p>
                </div>
                
                <div id="google-signin" class="mb-4"></div>
                
                <button onclick="handleGoogleLogin()" 
                        class="w-full bg-white text-gray-900 py-3 px-6 rounded-lg font-semibold hover:bg-gray-100 transition-colors flex items-center justify-center space-x-2">
                    <svg class="w-5 h-5" viewBox="0 0 24 24">
                        <path fill="currentColor" d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"/>
                        <path fill="currentColor" d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"/>
                        <path fill="currentColor" d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"/>
                        <path fill="currentColor" d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"/>
                    </svg>
                    <span>Login with Google</span>
                </button>
            </div>
        </div>

        <!-- Main App -->
        <div id="main-app" class="hidden">
            <!-- Header -->
            <header class="bg-gray-800 p-4 flex items-center justify-between">
                <div class="flex items-center space-x-3">
                    <img id="user-avatar" class="w-10 h-10 rounded-full" src="" alt="Avatar">
                    <div>
                        <h2 id="user-name" class="font-semibold"></h2>
                        <div class="flex items-center space-x-4 text-sm text-yellow-400">
                            <span id="user-coins">🪙 0</span>
                            <span id="user-diamonds">💎 0</span>
                        </div>
                    </div>
                </div>
                <button onclick="logout()" class="text-red-400 hover:text-red-300">Logout</button>
            </header>

            <!-- Navigation -->
            <nav class="bg-gray-800 border-t border-gray-700">
                <div class="flex justify-around py-2">
                    <button onclick="showSection('home')" class="nav-btn py-2 px-4 text-blue-400">🏠 Home</button>
                    <button onclick="showSection('rooms')" class="nav-btn py-2 px-4">🎤 Rooms</button>
                    <button onclick="showSection('games')" class="nav-btn py-2 px-4">🎮 Games</button>
                    <button onclick="showSection('wallet')" class="nav-btn py-2 px-4">💰 Wallet</button>
                    <button onclick="showSection('profile')" class="nav-btn py-2 px-4">👤 Profile</button>
                </div>
            </nav>

            <!-- Content Sections -->
            <main class="p-4 pb-20">
                <!-- Home Section -->
                <section id="home-section" class="section">
                    <div class="text-center mb-6">
                        <h2 class="text-2xl font-bold mb-2">Welcome to SK Party Room!</h2>
                        <p class="text-gray-400">Connect, Play, Win!</p>
                    </div>
                    
                    <div class="grid grid-cols-2 gap-4 mb-6">
                        <div class="bg-gradient-to-r from-purple-500 to-pink-500 p-4 rounded-lg">
                            <h3 class="font-semibold mb-2">🎤 Voice Rooms</h3>
                            <p class="text-sm opacity-90">Join live conversations</p>
                        </div>
                        <div class="bg-gradient-to-r from-green-500 to-blue-500 p-4 rounded-lg">
                            <h3 class="font-semibold mb-2">🎮 Games</h3>
                            <p class="text-sm opacity-90">Play and win coins</p>
                        </div>
                    </div>
                </section>

                <!-- Games Section -->
                <section id="games-section" class="section hidden">
                    <h2 class="text-2xl font-bold mb-4">🎮 Game Center</h2>
                    <div id="games-grid" class="grid grid-cols-2 gap-4">
                        <!-- Games will be loaded here -->
                    </div>
                </section>

                <!-- Wallet Section -->
                <section id="wallet-section" class="section hidden">
                    <h2 class="text-2xl font-bold mb-4">💰 My Wallet</h2>
                    
                    <div class="bg-gray-800 p-4 rounded-lg mb-6">
                        <h3 class="text-lg font-semibold mb-2">Balance</h3>
                        <div class="flex space-x-4">
                            <div class="text-yellow-400">
                                <span class="text-2xl">🪙</span>
                                <span id="wallet-coins" class="text-xl font-bold">0</span>
                            </div>
                            <div class="text-blue-400">
                                <span class="text-2xl">💎</span>
                                <span id="wallet-diamonds" class="text-xl font-bold">0</span>
                            </div>
                        </div>
                    </div>

                    <h3 class="text-lg font-semibold mb-4">Recharge Coins</h3>
                    <div id="coin-packages" class="space-y-3">
                        <!-- Coin packages will be loaded here -->
                    </div>
                </section>

                <!-- Rooms Section -->
                <section id="rooms-section" class="section hidden">
                    <h2 class="text-2xl font-bold mb-4">🎤 Voice Rooms</h2>
                    <div class="text-center text-gray-400">
                        <p>Voice rooms coming soon!</p>
                    </div>
                </section>

                <!-- Profile Section -->
                <section id="profile-section" class="section hidden">
                    <h2 class="text-2xl font-bold mb-4">👤 Profile</h2>
                    <div class="bg-gray-800 p-4 rounded-lg">
                        <div class="flex items-center space-x-4 mb-4">
                            <img id="profile-avatar" class="w-16 h-16 rounded-full" src="" alt="Avatar">
                            <div>
                                <h3 id="profile-name" class="text-lg font-semibold"></h3>
                                <p id="profile-email" class="text-gray-400"></p>
                            </div>
                        </div>
                        
                        <div class="grid grid-cols-3 gap-4 text-center">
                            <div>
                                <div class="text-2xl font-bold" id="profile-level">1</div>
                                <div class="text-sm text-gray-400">Level</div>
                            </div>
                            <div>
                                <div class="text-2xl font-bold" id="profile-games">0</div>
                                <div class="text-sm text-gray-400">Games</div>
                            </div>
                            <div>
                                <div class="text-2xl font-bold" id="profile-wins">0</div>
                                <div class="text-sm text-gray-400">Wins</div>
                            </div>
                        </div>
                    </div>
                </section>
            </main>
        </div>

        <!-- Payment Modal -->
        <div id="payment-modal" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
            <div class="bg-gray-800 rounded-lg p-6 max-w-md w-full mx-4">
                <h3 class="text-xl font-bold mb-4">Complete Payment</h3>
                <div id="payment-details" class="mb-4">
                    <!-- Payment details will be shown here -->
                </div>
                <div class="space-y-3">
                    <button id="phonepe-btn" class="w-full bg-purple-600 text-white py-3 rounded-lg font-semibold">
                        📱 Pay with PhonePe
                    </button>
                    <button id="googlepay-btn" class="w-full bg-blue-600 text-white py-3 rounded-lg font-semibold">
                        💳 Pay with Google Pay
                    </button>
                    <button id="paytm-btn" class="w-full bg-blue-800 text-white py-3 rounded-lg font-semibold">
                        💰 Pay with Paytm
                    </button>
                    <button onclick="closePaymentModal()" class="w-full bg-gray-600 text-white py-3 rounded-lg">
                        Cancel
                    </button>
                </div>
            </div>
        </div>
    </div>

    <script src="app.js"></script>
</body>
</html>
""",

    "public/app.js": """// SK Party Room - Client Application
let currentUser = null;
let socket = null;
let authToken = null;

// Initialize app
document.addEventListener('DOMContentLoaded', function() {
    initializeApp();
});

function initializeApp() {
    // Check if user is already logged in
    const savedToken = localStorage.getItem('sk_party_token');
    if (savedToken) {
        authToken = savedToken;
        verifyToken();
    } else {
        showLoginAfterLoading();
    }
}

function showLoginAfterLoading() {
    setTimeout(() => {
        document.getElementById('loading-screen').classList.add('hidden');
        document.getElementById('login-screen').classList.remove('hidden');
        initializeGoogleSignIn();
    }, 2000);
}

function initializeGoogleSignIn() {
    if (window.google) {
        google.accounts.id.initialize({
            client_id: '111513181225548714566-YOUR_CLIENT_ID.googleusercontent.com',
            callback: handleCredentialResponse,
            auto_select: true
        });

        google.accounts.id.renderButton(
            document.getElementById('google-signin'),
            {
                theme: 'filled_blue',
                size: 'large',
                width: '100%'
            }
        );
    }
}

function handleCredentialResponse(response) {
    const token = response.credential;
    authenticateWithBackend(token);
}

function handleGoogleLogin() {
    google.accounts.id.prompt();
}

async function authenticateWithBackend(googleToken) {
    try {
        const response = await fetch('/api/auth/google', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ token: googleToken })
        });

        const data = await response.json();
        
        if (data.success) {
            authToken = data.token;
            currentUser = data.user;
            localStorage.setItem('sk_party_token', authToken);
            
            showMainApp();
            initializeSocket();
            loadUserData();
        } else {
            alert('Login failed: ' + data.message);
        }
    } catch (error) {
        console.error('Auth error:', error);
        alert('Login failed. Please try again.');
    }
}

async function verifyToken() {
    try {
        const response = await fetch('/api/users/me', {
            headers: {
                'Authorization': `Bearer ${authToken}`
            }
        });

        if (response.ok) {
            const data = await response.json();
            currentUser = data.user;
            showMainApp();
            initializeSocket();
            loadUserData();
        } else {
            localStorage.removeItem('sk_party_token');
            showLoginAfterLoading();
        }
    } catch (error) {
        localStorage.removeItem('sk_party_token');
        showLoginAfterLoading();
    }
}

function showMainApp() {
    document.getElementById('loading-screen').classList.add('hidden');
    document.getElementById('login-screen').classList.add('hidden');
    document.getElementById('main-app').classList.remove('hidden');
}

function initializeSocket() {
    socket = io();
    
    socket.on('connect', () => {
        console.log('Connected to server');
    });
    
    socket.on('disconnect', () => {
        console.log('Disconnected from server');
    });
}

function loadUserData() {
    if (!currentUser) return;
    
    // Update UI with user data
    document.getElementById('user-name').textContent = currentUser.name;
    document.getElementById('user-avatar').src = currentUser.avatar;
    document.getElementById('user-coins').textContent = `🪙 ${currentUser.coins.toLocaleString()}`;
    document.getElementById('user-diamonds').textContent = `💎 ${currentUser.diamonds.toLocaleString()}`;
    
    // Profile section
    document.getElementById('profile-name').textContent = currentUser.name;
    document.getElementById('profile-email').textContent = currentUser.email;
    document.getElementById('profile-avatar').src = currentUser.avatar;
    document.getElementById('profile-level').textContent = currentUser.level;
    
    // Wallet section
    document.getElementById('wallet-coins').textContent = currentUser.coins.toLocaleString();
    document.getElementById('wallet-diamonds').textContent = currentUser.diamonds.toLocaleString();
    
    // Load games and packages
    loadGames();
    loadCoinPackages();
}

async function loadGames() {
    try {
        const response = await fetch('/api/games');
        const data = await response.json();
        
        if (data.success) {
            displayGames(data.games);
        }
    } catch (error) {
        console.error('Failed to load games:', error);
    }
}

function displayGames(games) {
    const gamesGrid = document.getElementById('games-grid');
    gamesGrid.innerHTML = '';
    
    const defaultGames = [
        { name: 'Slot Frenzy', icon: '🎰', entryFee: 100, type: 'slots' },
        { name: 'Fishing', icon: '🐟', entryFee: 50, type: 'fishing' },
        { name: 'Fruit Crush', icon: '🍓', entryFee: 75, type: 'puzzle' },
        { name: 'Greedy Cat', icon: '🐱', entryFee: 60, type: 'arcade' },
        { name: 'Roulette', icon: '🎡', entryFee: 100, type: 'casino' },
        { name: 'Lucky Wheel', icon: '🎪', entryFee: 80, type: 'wheel' }
    ];
    
    const gamesList = games.length > 0 ? games : defaultGames;
    
    gamesList.forEach(game => {
        const gameCard = document.createElement('div');
        gameCard.className = 'game-card bg-gradient-to-br from-purple-600 to-blue-600 p-4 rounded-lg cursor-pointer';
        gameCard.onclick = () => playGame(game);
        
        gameCard.innerHTML = `
            <div class="text-3xl mb-2 text-center">${game.icon}</div>
            <h4 class="font-semibold text-sm text-center mb-1">${game.name}</h4>
            <p class="text-xs text-center opacity-80">Entry: ${game.entryFee} coins</p>
        `;
        
        gamesGrid.appendChild(gameCard);
    });
}

async function playGame(game) {
    if (currentUser.coins < game.entryFee) {
        alert('Insufficient coins! Please recharge your wallet.');
        showSection('wallet');
        return;
    }
    
    if (!confirm(`Play ${game.name} for ${game.entryFee} coins?`)) {
        return;
    }
    
    try {
        const response = await fetch('/api/games/join', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${authToken}`
            },
            body: JSON.stringify({ gameId: game._id || 'default' })
        });
        
        const data = await response.json();
        
        if (data.success) {
            // Update coins immediately
            currentUser.coins = data.remainingCoins;
            updateCoinDisplay();
            
            // Simulate game play
            setTimeout(async () => {
                const playResponse = await fetch('/api/games/play', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${authToken}`
                    },
                    body: JSON.stringify({ 
                        sessionId: data.sessionId,
                        gameData: { result: Math.random() }
                    })
                });
                
                const playData = await playResponse.json();
                
                if (playData.success) {
                    currentUser.coins = playData.newBalance;
                    updateCoinDisplay();
                    
                    if (playData.isWin) {
                        alert(`🎉 Congratulations! You won ${playData.winAmount} coins!`);
                    } else {
                        alert('😔 Better luck next time!');
                    }
                }
            }, 2000);
            
        } else {
            alert(data.message);
        }
    } catch (error) {
        console.error('Game play error:', error);
        alert('Failed to join game. Please try again.');
    }
}

function updateCoinDisplay() {
    document.getElementById('user-coins').textContent = `🪙 ${currentUser.coins.toLocaleString()}`;
    document.getElementById('wallet-coins').textContent = currentUser.coins.toLocaleString();
}

async function loadCoinPackages() {
    try {
        const response = await fetch('/api/wallet/packages');
        const data = await response.json();
        
        if (data.success) {
            displayCoinPackages(data.packages);
        }
    } catch (error) {
        console.error('Failed to load packages:', error);
    }
}

function displayCoinPackages(packages) {
    const packagesContainer = document.getElementById('coin-packages');
    packagesContainer.innerHTML = '';
    
    packages.forEach(pkg => {
        const packageCard = document.createElement('div');
        packageCard.className = 'bg-gray-700 p-4 rounded-lg cursor-pointer hover:bg-gray-600 transition-colors';
        packageCard.onclick = () => initiatePayment(pkg);
        
        packageCard.innerHTML = `
            <div class="flex justify-between items-center">
                <div>
                    <div class="font-semibold text-yellow-400">🪙 ${pkg.coins.toLocaleString()}</div>
                    <div class="text-sm text-gray-300">VIP Exp: ${pkg.vip.toLocaleString()}</div>
                </div>
                <div class="text-right">
                    <div class="font-bold text-lg">₹${pkg.price}</div>
                    <button class="text-blue-400 text-sm">Recharge</button>
                </div>
            </div>
        `;
        
        packagesContainer.appendChild(packageCard);
    });
}

async function initiatePayment(package) {
    try {
        const response = await fetch('/api/wallet/recharge', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${authToken}`
            },
            body: JSON.stringify({
                packageId: package.id,
                amount: package.price,
                coins: package.coins
            })
        });
        
        const data = await response.json();
        
        if (data.success) {
            showPaymentModal(data.paymentData, package);
        }
    } catch (error) {
        console.error('Payment initiation error:', error);
        alert('Payment failed. Please try again.');
    }
}

function showPaymentModal(paymentData, package) {
    const modal = document.getElementById('payment-modal');
    const details = document.getElementById('payment-details');
    
    details.innerHTML = `
        <div class="text-center mb-4">
            <div class="text-2xl font-bold">₹${paymentData.amount}</div>
            <div class="text-yellow-400">${package.coins.toLocaleString()} Coins</div>
            <div class="text-sm text-gray-400">Order ID: ${paymentData.orderId}</div>
        </div>
        <div class="bg-gray-700 p-3 rounded text-center mb-4">
            <div class="text-sm">UPI ID: subhashkujhuria5558@paytm</div>
        </div>
    `;
    
    // Set up payment buttons
    document.getElementById('phonepe-btn').onclick = () => {
        window.location.href = paymentData.upiLinks.phonepe;
        setTimeout(() => verifyPayment(paymentData.orderId, package.coins), 5000);
    };
    
    document.getElementById('googlepay-btn').onclick = () => {
        window.location.href = paymentData.upiLinks.googlepay;
        setTimeout(() => verifyPayment(paymentData.orderId, package.coins), 5000);
    };
    
    document.getElementById('paytm-btn').onclick = () => {
        window.location.href = paymentData.upiLinks.paytm;
        setTimeout(() => verifyPayment(paymentData.orderId, package.coins), 5000);
    };
    
    modal.classList.remove('hidden');
}

function closePaymentModal() {
    document.getElementById('payment-modal').classList.add('hidden');
}

async function verifyPayment(orderId, coins) {
    // In a real app, this would be automatic via webhooks
    const transactionId = prompt('Enter transaction ID from your payment app:');
    
    if (!transactionId) {
        return;
    }
    
    try {
        const response = await fetch('/api/wallet/verify-payment', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${authToken}`
            },
            body: JSON.stringify({
                orderId,
                transactionId,
                coins
            })
        });
        
        const data = await response.json();
        
        if (data.success) {
            currentUser.coins = data.newBalance;
            updateCoinDisplay();
            closePaymentModal();
            alert('Payment successful! Coins added to your account.');
        } else {
            alert('Payment verification failed: ' + data.message);
        }
    } catch (error) {
        console.error('Payment verification error:', error);
        alert('Payment verification failed. Please contact support.');
    }
}

function showSection(sectionName) {
    // Hide all sections
    document.querySelectorAll('.section').forEach(section => {
        section.classList.add('hidden');
    });
    
    // Remove active class from all nav buttons
    document.querySelectorAll('.nav-btn').forEach(btn => {
        btn.classList.remove('text-blue-400');
    });
    
    // Show selected section
    document.getElementById(`${sectionName}-section`).classList.remove('hidden');
    
    // Add active class to clicked nav button
    event.target.classList.add('text-blue-400');
}

function logout() {
    if (confirm('Are you sure you want to logout?')) {
        localStorage.removeItem('sk_party_token');
        currentUser = null;
        authToken = null;
        
        if (socket) {
            socket.disconnect();
        }
        
        location.reload();
    }
}

// Initialize default games data
const initializeDefaultGames = async () => {
    const defaultGames = [
        { name: 'Slot Frenzy', type: 'slots', icon: '🎰', entryFee: 100, minWin: 50, maxWin: 1000, winRate: 0.4 },
        { name: 'Fishing Game', type: 'arcade', icon: '🐟', entryFee: 50, minWin: 20, maxWin: 500, winRate: 0.5 },
        { name: 'Fruit Crush', type: 'puzzle', icon: '🍓', entryFee: 75, minWin: 30, maxWin: 750, winRate: 0.45 },
        { name: 'Lucky Wheel', type: 'wheel', icon: '🎡', entryFee: 100, minWin: 50, maxWin: 2000, winRate: 0.35 },
        { name: 'Card Master', type: 'card', icon: '🃏', entryFee: 150, minWin: 75, maxWin: 1500, winRate: 0.4 },
        { name: 'Number Blast', type: 'numbers', icon: '🔢', entryFee: 80, minWin: 40, maxWin: 800, winRate: 0.5 }
    ];
    
    return defaultGames;
};
"""
}

# Create project structure
for filename, content in project_structure.items():
    if filename.endswith('.json'):
        with open(f'{filename}', 'w') as f:
            json.dump(content, f, indent=2)
    else:
        # Create directory if needed
        if '/' in filename:
            os.makedirs(os.path.dirname(filename), exist_ok=True)
        
        with open(filename, 'w') as f:
            f.write(content)

print("✅ Railway-ready SK Party Room project created successfully!")
print("\n📁 Project Structure:")
for filename in project_structure.keys():
    print(f"  {filename}")

print("\n🚀 Deployment Instructions:")
print("1. Create a new Railway project")
print("2. Connect your GitHub repository")
print("3. Set environment variables in Railway dashboard:")
print("   - MONGODB_URI (MongoDB Atlas connection string)")
print("   - JWT_SECRET (any random string)")
print("   - GOOGLE_CLIENT_ID (from your Google Cloud Console)")
print("   - GOOGLE_CLIENT_SECRET (from your Google Cloud Console)")
print("4. Deploy automatically via GitHub")
print("\n✨ Your SK Party Room app will be live on Railway!")
